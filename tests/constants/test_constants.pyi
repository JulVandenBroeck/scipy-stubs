# ruff: noqa: ERA001
from typing import assert_type

import numpy as np
import numpy.typing as npt

from scipy import constants

assert_type(constants.convert_temperature(1, "Celsius", "Kelvin"), np.float64)
assert_type(constants.convert_temperature([1], "Celsius", "Kelvin"), npt.NDArray[np.float64])
assert_type(constants.convert_temperature(np.array([1], dtype=np.uint64), "Celsius", "Kelvin"), npt.NDArray[np.float64])
assert_type(constants.convert_temperature(np.array([1], dtype=np.float32), "Celsius", "Kelvin"), npt.NDArray[np.float32])
assert_type(constants.convert_temperature(np.array([1], dtype=np.float64), "Celsius", "Kelvin"), npt.NDArray[np.float64])
assert_type(constants.convert_temperature(np.array([1], dtype=np.complex64), "Celsius", "Kelvin"), npt.NDArray[np.complex64])

assert_type(constants.lambda2nu(1), np.float64)
assert_type(constants.lambda2nu([1]), npt.NDArray[np.float64])
assert_type(constants.lambda2nu(np.array([1], dtype=np.uint64)), npt.NDArray[np.float64])
assert_type(constants.lambda2nu(np.array([1], dtype=np.float32)), npt.NDArray[np.float32])
assert_type(constants.lambda2nu(np.array([1], dtype=np.float64)), npt.NDArray[np.float64])
assert_type(constants.lambda2nu(np.array([1], dtype=np.complex64)), npt.NDArray[np.complex64])

assert_type(constants.nu2lambda(1), np.float64)
assert_type(constants.nu2lambda([1]), npt.NDArray[np.float64])
assert_type(constants.nu2lambda(np.array([1], dtype=np.uint64)), npt.NDArray[np.float64])
assert_type(constants.nu2lambda(np.array([1], dtype=np.float32)), npt.NDArray[np.float32])
assert_type(constants.nu2lambda(np.array([1], dtype=np.float64)), npt.NDArray[np.float64])
assert_type(constants.nu2lambda(np.array([1], dtype=np.complex64)), npt.NDArray[np.complex64])

###

# for k, v in vars(scipy.constants).items():
#     if isinstance(v, int | float):
#         print(f"assert_type(constants.{k}, {type(v).__name__})")

assert_type(constants.Avogadro, float)
assert_type(constants.Boltzmann, float)
assert_type(constants.Btu, float)
assert_type(constants.Btu_IT, float)
assert_type(constants.Btu_th, float)
assert_type(constants.G, float)
assert_type(constants.Julian_year, float)
assert_type(constants.N_A, float)
assert_type(constants.Planck, float)
assert_type(constants.R, float)
assert_type(constants.Rydberg, float)
assert_type(constants.Stefan_Boltzmann, float)
assert_type(constants.Wien, float)
assert_type(constants.acre, float)
assert_type(constants.alpha, float)
assert_type(constants.angstrom, float)
assert_type(constants.arcmin, float)
assert_type(constants.arcminute, float)
assert_type(constants.arcsec, float)
assert_type(constants.arcsecond, float)
assert_type(constants.astronomical_unit, float)
assert_type(constants.atm, float)
assert_type(constants.atmosphere, float)
assert_type(constants.atomic_mass, float)
assert_type(constants.atto, float)
assert_type(constants.au, float)
assert_type(constants.bar, float)
assert_type(constants.barrel, float)
assert_type(constants.bbl, float)
assert_type(constants.blob, float)
assert_type(constants.c, float)
assert_type(constants.calorie, float)
assert_type(constants.calorie_IT, float)
assert_type(constants.calorie_th, float)
assert_type(constants.carat, float)
assert_type(constants.centi, float)
assert_type(constants.day, float)
assert_type(constants.deci, float)
assert_type(constants.degree, float)
assert_type(constants.degree_Fahrenheit, float)
assert_type(constants.deka, float)
assert_type(constants.dyn, float)
assert_type(constants.dyne, float)
assert_type(constants.e, float)
assert_type(constants.eV, float)
assert_type(constants.electron_mass, float)
assert_type(constants.electron_volt, float)
assert_type(constants.elementary_charge, float)
assert_type(constants.epsilon_0, float)
assert_type(constants.erg, float)
assert_type(constants.exa, float)
assert_type(constants.exbi, int)
assert_type(constants.femto, float)
assert_type(constants.fermi, float)
assert_type(constants.fine_structure, float)
assert_type(constants.fluid_ounce, float)
assert_type(constants.fluid_ounce_US, float)
assert_type(constants.fluid_ounce_imp, float)
assert_type(constants.foot, float)
assert_type(constants.g, float)
assert_type(constants.gallon, float)
assert_type(constants.gallon_US, float)
assert_type(constants.gallon_imp, float)
assert_type(constants.gas_constant, float)
assert_type(constants.gibi, int)
assert_type(constants.giga, float)
assert_type(constants.golden, float)
assert_type(constants.golden_ratio, float)
assert_type(constants.grain, float)
assert_type(constants.gram, float)
assert_type(constants.gravitational_constant, float)
assert_type(constants.h, float)
assert_type(constants.hbar, float)
assert_type(constants.hectare, float)
assert_type(constants.hecto, float)
assert_type(constants.horsepower, float)
assert_type(constants.hour, float)
assert_type(constants.hp, float)
assert_type(constants.inch, float)
assert_type(constants.k, float)
assert_type(constants.kgf, float)
assert_type(constants.kibi, int)
assert_type(constants.kilo, float)
assert_type(constants.kilogram_force, float)
assert_type(constants.kmh, float)
assert_type(constants.knot, float)
assert_type(constants.lb, float)
assert_type(constants.lbf, float)
assert_type(constants.light_year, float)
assert_type(constants.liter, float)
assert_type(constants.litre, float)
assert_type(constants.long_ton, float)
assert_type(constants.m_e, float)
assert_type(constants.m_n, float)
assert_type(constants.m_p, float)
assert_type(constants.m_u, float)
assert_type(constants.mach, float)
assert_type(constants.mebi, int)
assert_type(constants.mega, float)
assert_type(constants.metric_ton, float)
assert_type(constants.micro, float)
assert_type(constants.micron, float)
assert_type(constants.mil, float)
assert_type(constants.mile, float)
assert_type(constants.milli, float)
assert_type(constants.minute, float)
assert_type(constants.mmHg, float)
assert_type(constants.mph, float)
assert_type(constants.mu_0, float)
assert_type(constants.nano, float)
assert_type(constants.nautical_mile, float)
assert_type(constants.neutron_mass, float)
assert_type(constants.ounce, float)
assert_type(constants.oz, float)
assert_type(constants.parsec, float)
assert_type(constants.pebi, int)
assert_type(constants.peta, float)
assert_type(constants.pi, float)
assert_type(constants.pico, float)
assert_type(constants.point, float)
assert_type(constants.pound, float)
assert_type(constants.pound_force, float)
assert_type(constants.proton_mass, float)
assert_type(constants.psi, float)
assert_type(constants.pt, float)
assert_type(constants.quecto, float)
assert_type(constants.quetta, float)
assert_type(constants.ronna, float)
assert_type(constants.ronto, float)
assert_type(constants.short_ton, float)
assert_type(constants.sigma, float)
assert_type(constants.slinch, float)
assert_type(constants.slug, float)
assert_type(constants.speed_of_light, float)
assert_type(constants.speed_of_sound, float)
assert_type(constants.stone, float)
assert_type(constants.survey_foot, float)
assert_type(constants.survey_mile, float)
assert_type(constants.tebi, int)
assert_type(constants.tera, float)
assert_type(constants.ton_TNT, float)
assert_type(constants.torr, float)
assert_type(constants.troy_ounce, float)
assert_type(constants.troy_pound, float)
assert_type(constants.u, float)
assert_type(constants.week, float)
assert_type(constants.yard, float)
assert_type(constants.year, float)
assert_type(constants.yobi, int)
assert_type(constants.yocto, float)
assert_type(constants.yotta, float)
assert_type(constants.zebi, int)
assert_type(constants.zepto, float)
assert_type(constants.zero_Celsius, float)
assert_type(constants.zetta, float)
